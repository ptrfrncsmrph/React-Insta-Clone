// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as DateFns from "bs-date-fns/src/DateFns.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";

var component = ReasonReact.reducerComponent("Todo");

function make(_children) {
  var handleSubmit = function (state) {
    var newId = List.length(state[/* items */0]);
    var newItem_001 = /* title */state[/* inputText */1];
    var newItem_003 = /* dateCreated */new Date();
    var newItem = /* record */[
      /* id */newId,
      newItem_001,
      /* completed */false,
      newItem_003
    ];
    var newList_001 = state[/* items */0];
    var newList = /* :: */[
      newItem,
      newList_001
    ];
    return /* Update */Block.__(0, [/* record */[
                /* items */newList,
                /* inputText */""
              ]]);
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1];
              return React.createElement(React.Fragment, undefined, React.createElement("ul", undefined, $$Array.of_list(List.rev(List.map((function (item) {
                                            return React.createElement("li", {
                                                        key: String(item[/* id */0])
                                                      }, React.createElement("div", undefined, item[/* title */1]), React.createElement("div", undefined, DateFns.distanceInWords(undefined, undefined, new Date(), item[/* dateCreated */3]).concat(" ago")));
                                          }), match[/* items */0])))), React.createElement("form", {
                              onSubmit: (function (e) {
                                  e.preventDefault();
                                  return Curry._1(self[/* send */3], /* Submit */0);
                                })
                            }, React.createElement("input", {
                                  value: match[/* inputText */1],
                                  onChange: (function (e) {
                                      return Curry._1(self[/* send */3], /* InputText */Block.__(0, [e.target.value]));
                                    })
                                }), React.createElement("button", undefined, "Submit")));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* items : :: */[
                        /* record */[
                          /* id */0,
                          /* title */"Fix more bugs",
                          /* completed */false,
                          /* dateCreated */new Date("December 12, 1992")
                        ],
                        /* [] */0
                      ],
                      /* inputText */""
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action) {
              if (typeof action === "number") {
                return handleSubmit;
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var str = action[0];
                      return (function (state) {
                          return /* Update */Block.__(0, [/* record */[
                                      /* items */state[/* items */0],
                                      /* inputText */str
                                    ]]);
                        });
                  case 1 : 
                      var id = action[0];
                      return (function (state) {
                          return /* Update */Block.__(0, [/* record */[
                                      /* items */List.map((function (item) {
                                              var match = item[/* id */0] === id;
                                              if (match) {
                                                return /* record */[
                                                        /* id */item[/* id */0],
                                                        /* title */item[/* title */1],
                                                        /* completed */!item[/* completed */2],
                                                        /* dateCreated */item[/* dateCreated */3]
                                                      ];
                                              } else {
                                                return item;
                                              }
                                            }), state[/* items */0]),
                                      /* inputText */state[/* inputText */1]
                                    ]]);
                        });
                  case 2 : 
                      var id$1 = action[0];
                      return (function (state) {
                          return /* Update */Block.__(0, [/* record */[
                                      /* items */List.filter((function (item) {
                                                return item[/* id */0] !== id$1;
                                              }))(state[/* items */0]),
                                      /* inputText */state[/* inputText */1]
                                    ]]);
                        });
                  
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (_jsProps) {
        return make(/* array */[]);
      }));

export {
  component ,
  make ,
  jsComponent ,
  
}
/* component Not a pure module */
